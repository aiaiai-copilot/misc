# MISC (MindSection) - Consolidated Product Requirements Document for TaskMaster AI

## Executive Summary

This document defines requirements for transitioning MISC from a local storage prototype to a server-based multi-user MVP. The core philosophy of radical simplicity remains unchanged - everything is tags. The MVP adds user authentication, data persistence in PostgreSQL, and RESTful API while maintaining the minimal interface and instant information capture that defines MISC.

## 1. Product Vision and Philosophy

### 1.1. Philosophy

MISC is a minimalist information management system based on a single principle: everything is tags. Each record is simply a set of words separated by spaces. Each word is simultaneously both content and a way to find that content. The system eliminates the barrier between thought and recording, offering instant capture and search of information without traditional data organization structures. In a world overloaded with complex information organization systems, MISC offers a radical alternative. We remove forms, fields, folders, document types - leaving only the essence: words and connections between them.

### 1.2. Key Problem

Existing note-taking systems force users to think about structure instead of content:

  - Which folder to save to?
  - Which document type to choose?
  - Which fields to fill?
  - How to name it correctly?
    This is cognitive load that interferes with the main thing - rapid information capture.

### 1.3. Solution

MISC eliminates the barrier between thought and recording:

1.  **Recording**: Simply enter words separated by spaces
2.  **Search**: Enter any words from the record - find everything that contains them

Usage example:

```
peter ivanov phone 89151234455 birthday march 15
github password qwerty123 igor@gmail.com
alla petrova birthday 8 april
google password qwerty567 alex@gmail.com
meeting tomorrow 15:00 office project_alpha
```

Typing "peter phone" - find Peter's contact.
Typing "password" - see all saved passwords.
Typing "birthday" - see a list of birthdays you need.

### 1.4. Key Product Principles

1.  **Radical simplicity**: One mechanism for all types of information.
2.  **Zero entry barrier**: Requires no learning.
3.  **Speed priority**: Instant thought capture.
4.  **Transparency**: User always understands how the system works.
5.  **No structure - there is freedom**:
      - User decides how to interpret their records.
      - Word order is preserved for natural readability.
6.  **Speed over formality**: Instant thought capture without unnecessary actions.
7.  **Universality through simplicity**: One mechanism for all information types.

### 1.5. Manifesto

MISC is not just a note-taking application. It's an information management philosophy where the absence of rigidity becomes an advantage. We believe the best interface is minimalist, and the best system is one that doesn't need to be learned.

## 2. Project Context

### 2.1 Current State (Prototype)

  - Local storage-based single-user application
  - Clean Architecture implementation (Domain, Application, Infrastructure, Presentation)
  - TypeScript monorepo with yarn workspaces
  - Comprehensive test coverage (Domain >95%, Use Cases >90%)
  - Working web interface with instant search and tag management

### 2.2 MVP Goals

  - Transform into multi-user server application
  - Maintain existing simplicity and user experience
  - Enable data persistence and backup
  - Provide secure isolated user spaces
  - Support up to 100 concurrent users

### 2.3 Key Constraints

  - Preserve all existing business logic
  - Maintain Clean Architecture principles
  - **Strict Test-Driven Development (TDD) approach**
  - Keep the same minimal UI philosophy
  - Ensure backward compatibility for data migration

### 2.4 TDD Methodology Requirements

**Mandatory TDD Process:**

1.  **Red Phase**: Write failing test first (contract specification)
2.  **Green Phase**: Write minimal code to pass the test
3.  **Refactor Phase**: Improve code while keeping tests green

**TDD Rules for MVP:**

  - No production code without failing test
  - Tests define contracts and specifications
  - Test coverage enforced in CI/CD pipeline
  - Code reviews must verify test-first approach
  - Each PR must show tests committed before implementation

**Test Priority Order:**

1.  Domain logic tests (define business rules)
2.  API contract tests (define interfaces)
3.  Integration tests (define system behavior)
4.  E2E tests (define user workflows)

## 3. Technical Architecture

### 3.1 Technology Stack

```yaml
Backend:
  Runtime: Node.js 22.x
  Language: TypeScript 5.x
  Framework: Express/Fastify
  Database: PostgreSQL 15+
  Migrations: TypeORM (migrations only)
  Validation: Joi/Zod
  Authentication: Passport.js with Google OAuth

Infrastructure:
  Container: Docker & Docker Compose
  Reverse Proxy: Nginx
  Environment: Self-hosted
  SSL: Let's Encrypt

Development:
  Testing: Jest/Vitest
  API Testing: Supertest
  E2E Testing: Playwright
  Code Quality: ESLint, Prettier
  Documentation: OpenAPI 3.0
```

### 3.2 System Architecture

```
┌─────────────────┐     ┌──────────────────┐
│   Web Client    │────▶│    Nginx         │
│   (React SPA)   │     │  (Reverse Proxy)  │
└─────────────────┘     └──────────────────┘
                               │
                               ▼
                    ┌──────────────────────┐
                    │   REST API Server    │
                    │  (Node.js/Express)   │
                    └──────────────────────┘
                               │
                    ┌──────────────────────┐
                    │   Business Logic     │
                    │  (Domain + Use Cases) │
                    └──────────────────────┘
                               │
                    ┌──────────────────────┐
                    │    PostgreSQL        │
                    │    (Data Store)      │
                    └──────────────────────┘
```

### 3.3 Deployment Architecture

```yaml
version: '3.8'
services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
  
  api:
    build: ./packages/backend
    environment:
      - DATABASE_URL=postgresql://user:pass@postgres:5432/misc
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
    depends_on:
      - postgres
  
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=misc
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=misc
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
```

## 4. Functional Requirements

### 4.1 User Authentication & Authorization

#### 4.1.1 Authentication Flow

**Contract Test Specification:**

```typescript
describe('Authentication Contract', () => {
  describe('Google OAuth Flow', () => {
    it('should create new user on first Google login');
    it('should return existing user on subsequent login');
    it('should reject invalid Google token with appropriate error');
    it('should handle Google OAuth service unavailability');
    it('should extract user email and profile from Google token');
    it('should generate JWT tokens after successful authentication');
    it('should set secure httpOnly cookies for session management');
  });
  
  describe('Session Validation', () => {
    it('should validate active JWT token');
    it('should reject expired JWT token');
    it('should reject malformed JWT token');
    it('should validate token signature');
    it('should extract user context from valid token');
  });
  
  describe('Session Revocation', () => {
    it('should invalidate active session');
    it('should clear session cookies');
    it('should reject operations with revoked token');
  });
})
```

#### 4.1.2 Session Management

  - JWT tokens with 7-day expiration
  - Refresh token rotation
  - Secure httpOnly cookies
  - CORS configuration for SPA

### 4.2 Data Model

#### 4.2.1 Database Schema

```sql
-- Users table
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  google_id VARCHAR(255) UNIQUE NOT NULL,
  display_name VARCHAR(255),
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_login_at TIMESTAMP WITH TIME ZONE
);

-- Records table
CREATE TABLE records (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  tags TEXT[] NOT NULL,
  normalized_tags TEXT[] NOT NULL, -- for search
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Ensure unique content per user
  UNIQUE(user_id, normalized_tags)
);

-- Indexes for performance
CREATE INDEX idx_records_user_id ON records(user_id);
CREATE GIN INDEX idx_records_normalized_tags ON records USING GIN(normalized_tags);
CREATE INDEX idx_records_created_at ON records(created_at DESC);

-- User settings table
CREATE TABLE user_settings (
  user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
  case_sensitive BOOLEAN DEFAULT FALSE,
  remove_accents BOOLEAN DEFAULT TRUE,
  max_tag_length INTEGER DEFAULT 100,
  max_tags_per_record INTEGER DEFAULT 50,
  ui_language VARCHAR(10) DEFAULT 'en',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

#### 4.2.2 Database Migration Strategy

**Migration Tool: TypeORM**

  - Used exclusively for schema migrations
  - No Active Record or Data Mapper patterns
  - Clean separation from domain entities

**Migration Structure:**

```typescript
// Migration naming convention: {timestamp}-{description}.ts
// Example: 1704067200000-CreateUserTable.ts
```

**Contract Test Specification:**

```typescript
describe('Database Migration Contract', () => {
  describe('Migration Execution', () => {
    it('should run all pending migrations on startup');
    it('should track applied migrations in migrations table');
    it('should execute migrations in chronological order');
    it('should rollback on migration failure');
    it('should prevent duplicate migration execution');
    it('should validate migration checksums');
  });
  
  describe('Migration Rollback', () => {
    it('should support down migrations for rollback');
    it('should rollback in reverse chronological order');
    it('should restore previous schema state');
    it('should handle data preservation during rollback');
  });
  
  describe('Migration Safety', () => {
    it('should use transactions for each migration');
    it('should validate schema after migration');
    it('should create backup before destructive migrations');
    it('should test migrations in CI pipeline');
  });
})
```

**Migration Files Structure:**

```
packages/backend/src/migrations/
├── 1704067200000-CreateUserTable.ts
├── 1704067200001-CreateRecordsTable.ts
├── 1704067200002-CreateUserSettingsTable.ts
├── 1704067200003-AddIndexes.ts
└── 1704067200004-AddConstraints.ts
```

**TypeORM Configuration:**

```json
{
  "type": "postgres",
  "host": "postgres",
  "port": 5432,
  "database": "misc",
  "migrations": ["src/migrations/*.ts"],
  "migrationsTableName": "schema_migrations",
  "migrationsTransactionMode": "each",
  "synchronize": false,
  "logging": ["migration", "error", "warn"]
}
```

#### 4.2.3 Data Migration Contract

**Export Format Structure:**

```json
{
  "version": "2.0",
  "records": [
    {
      "content": "string",
      "createdAt": "ISO-8601",
      "updatedAt": "ISO-8601"
    }
  ],
  "metadata": {
    "exportedAt": "ISO-8601",
    "recordCount": "number",
    "normalizationRules": {
      "caseSensitive": "boolean",
      "removeAccents": "boolean"
    }
  }
}
```

**Contract Test Specification:**

```typescript
describe('Data Migration Contract', () => {
  describe('Import from JSON', () => {
    it('should import records from v1.0 format');
    it('should import records from v2.0 format');
    it('should skip duplicate records during import');
    it('should preserve original timestamps');
    it('should apply current user normalization settings');
    it('should report count of imported, skipped and failed records');
    it('should validate JSON structure before import');
    it('should handle malformed JSON gracefully');
    it('should enforce maximum import size limit');
    it('should maintain tag order from original records');
  });
  
  describe('Export to JSON', () => {
    it('should export all user records');
    it('should include version identifier');
    it('should include export metadata');
    it('should preserve record timestamps');
    it('should maintain tag order in exported records');
    it('should include user normalization settings');
    it('should generate valid JSON format');
    it('should handle large datasets (10k+ records)');
  });
})
```

### 4.3 REST API Specification

#### 4.3.1 API Endpoints

```yaml
openapi: 3.0.0
info:
  title: MISC API
  version: 2.0.0

paths:
  /auth/google:
    post:
      summary: Authenticate with Google OAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/records:
    get:
      summary: Search records
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: Space-separated tags to search
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Record'
                  total:
                    type: integer
    
    post:
      summary: Create new record
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "meeting project alpha 15:00"
      responses:
        201:
          description: Record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'

  /api/records/{id}:
    put:
      summary: Update record
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        200:
          description: Record updated
          
    delete:
      summary: Delete record
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Record deleted

  /api/tags:
    get:
      summary: Get tag statistics
      security:
        - bearerAuth: []
      responses:
        200:
          description: Tag cloud data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag:
                      type: string
                    count:
                      type: integer

  /api/export:
    get:
      summary: Export all user data
      security:
        - bearerAuth: []
      responses:
        200:
          description: Export data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportFormat'

  /api/import:
    post:
      summary: Import data
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportFormat'
      responses:
        200:
          description: Import result
          content:
            application/json:
              schema:
                type: object
                properties:
                  imported:
                    type: integer
                  skipped:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: string
```

#### 4.3.2 API Contract Tests

**Contract Test Specification:**

```typescript
describe('Records API Contract', () => {
  describe('POST /api/records', () => {
    it('should create record with automatic tag extraction');
    it('should preserve tag order as entered by user');
    it('should normalize tags according to user settings');
    it('should apply case-insensitive normalization when configured');
    it('should remove accents from tags when configured');
    it('should reject duplicate records with 409 status');
    it('should validate maximum tag length');
    it('should validate maximum number of tags per record');
    it('should require authentication with 401 for anonymous');
    it('should isolate records per user');
    it('should return created record with generated ID');
    it('should set creation and update timestamps');
  });

  describe('GET /api/records', () => {
    it('should search with AND logic for multiple tags');
    it('should return empty results for non-matching search');
    it('should respect user data isolation');
    it('should support pagination with limit and offset');
    it('should return total count with results');
    it('should order results by creation date descending');
    it('should handle empty search query (return all records)');
    it('should normalize search terms according to user settings');
    it('should require authentication with 401 for anonymous');
    it('should handle special characters in search query');
  });
  
  describe('PUT /api/records/:id', () => {
    it('should update existing record content');
    it('should recalculate tags from new content');
    it('should update modification timestamp');
    it('should preserve creation timestamp');
    it('should return 404 for non-existent record');
    it('should return 404 for other user record');
    it('should validate updated content constraints');
    it('should handle duplicate check for updated tags');
    it('should require authentication with 401 for anonymous');
  });
  
  describe('DELETE /api/records/:id', () => {
    it('should delete existing record');
    it('should return 204 on successful deletion');
    it('should return 404 for non-existent record');
    it('should return 404 for other user record');
    it('should require authentication with 401 for anonymous');
  });
  
  describe('GET /api/tags', () => {
    it('should return tag frequency statistics');
    it('should include only user own tags');
    it('should order tags by frequency descending');
    it('should include tag count for each tag');
    it('should handle tags with special characters');
    it('should require authentication with 401 for anonymous');
  });
  
  describe('GET /api/export', () => {
    it('should export all user records in JSON format');
    it('should include version identifier in export');
    it('should include export metadata');
    it('should preserve record timestamps');
    it('should maintain tag order in exports');
    it('should include normalization settings');
    it('should require authentication with 401 for anonymous');
  });
  
  describe('POST /api/import', () => {
    it('should import valid JSON data');
    it('should return import statistics (imported/skipped/errors)');
    it('should handle v1.0 format migration');
    it('should handle v2.0 format import');
    it('should skip duplicate records');
    it('should validate JSON structure');
    it('should reject invalid JSON with 400');
    it('should enforce size limits');
    it('should require authentication with 401 for anonymous');
    it('should isolate imported data per user');
  });
})
```

### 4.4 Business Logic Migration

#### 4.4.1 Domain Layer Preservation

The existing domain entities must remain unchanged to preserve business logic:

  - Record entity with tag extraction
  - Tag normalization services
  - Content validation rules
  - Tag order preservation logic

New domain entities for MVP:

  - User aggregate root
  - User settings value object
  - Authentication context

#### 4.4.2 Repository Contracts

**Contract Test Specification:**

```typescript
describe('Record Repository Contract', () => {
  describe('save', () => {
    it('should persist new record with user association');
    it('should update existing record preserving creation date');
    it('should normalize tags according to user settings');
    it('should detect and reject duplicates');
    it('should maintain tag order from domain entity');
    it('should handle concurrent saves safely');
  });
  
  describe('findByTags', () => {
    it('should find records matching all specified tags (AND logic)');
    it('should return empty array when no matches');
    it('should search using normalized tags');
    it('should return only user-owned records');
    it('should preserve domain entity structure');
    it('should order by creation date descending');
  });
  
  describe('findById', () => {
    it('should return record by ID for owner');
    it('should return null for non-existent record');
    it('should return null for other user record');
    it('should reconstruct complete domain entity');
  });
  
  describe('delete', () => {
    it('should remove record from storage');
    it('should only delete user-owned records');
    it('should handle non-existent record gracefully');
  });
  
  describe('getTagStatistics', () => {
    it('should count frequency for each unique tag');
    it('should include only user tags');
    it('should use normalized tags for counting');
    it('should order by frequency descending');
  });
})

describe('User Repository Contract', () => {
  describe('findByGoogleId', () => {
    it('should find user by Google OAuth ID');
    it('should return null for non-existent user');
    it('should include user settings');
  });
  
  describe('create', () => {
    it('should create new user with Google profile');
    it('should initialize default settings');
    it('should handle duplicate email gracefully');
    it('should set creation timestamp');
  });
  
  describe('updateSettings', () => {
    it('should persist user preference changes');
    it('should validate setting constraints');
    it('should update modification timestamp');
  });
})
```

### 4.5 Frontend Adaptation

#### 4.5.1 API Client Contract

**Contract Test Specification:**

```typescript
describe('API Client Contract', () => {
  describe('Authentication', () => {
    it('should initiate Google OAuth flow');
    it('should handle OAuth callback');
    it('should store authentication tokens');
    it('should include auth headers in requests');
    it('should handle token expiration');
    it('should refresh tokens automatically');
    it('should clear tokens on logout');
  });
  
  describe('Record Operations', () => {
    it('should search records with query string');
    it('should create new record from content');
    it('should update existing record');
    it('should delete record by ID');
    it('should handle network errors gracefully');
    it('should retry failed requests with exponential backoff');
    it('should show loading states during operations');
  });
  
  describe('Data Migration', () => {
    it('should export all user data to JSON');
    it('should import data from JSON file');
    it('should show import progress');
    it('should handle import errors');
    it('should validate file format before import');
  });
  
  describe('Error Handling', () => {
    it('should display user-friendly error messages');
    it('should redirect to login on 401');
    it('should show network error notifications');
    it('should handle rate limit errors');
    it('should log errors for debugging');
  });
})
```

#### 4.5.2 State Management Adaptation

**Contract Test Specification:**

```typescript
describe('Frontend State Management Contract', () => {
  describe('Authentication State', () => {
    it('should track authentication status');
    it('should store user profile information');
    it('should persist auth state across refreshes');
    it('should clear state on logout');
    it('should handle authentication errors');
  });
  
  describe('Records State', () => {
    it('should manage records list');
    it('should track loading states');
    it('should handle optimistic updates');
    it('should rollback on server errors');
    it('should cache search results');
    it('should invalidate cache on mutations');
  });
  
  describe('UI State', () => {
    it('should manage search query');
    it('should track selected record');
    it('should handle edit mode');
    it('should manage error notifications');
    it('should control loading indicators');
  });
})
```

## 5. Non-Functional Requirements

### 5.1 Performance Requirements

```yaml
Response Times:
  Authentication: < 2s (including Google OAuth)
  Record Creation: < 100ms
  Search (up to 10k records): < 200ms
  Tag Statistics: < 500ms
  Export (10k records): < 5s

Throughput:
  Concurrent Users: 100
  Requests per Second: 50
  Database Connections: 20 (pool size)

Resource Usage:
  Memory (API Server): < 512MB
  Memory (Database): < 1GB
  Disk (Database): < 10GB for 100 users
  CPU: < 2 cores average usage
```

### 5.2 Security Requirements

```yaml
Authentication:
  Provider: Google OAuth 2.0
  Token Type: JWT
  Token Storage: httpOnly secure cookies
  Session Duration: 7 days
  
Transport Security:
  Protocol: HTTPS only
  SSL/TLS: Let's Encrypt certificates
  HSTS: Enabled
  
Data Protection:
  Input Validation: All user inputs sanitized
  SQL Injection: Parameterized queries only
  XSS Prevention: Content Security Policy
  CORS: Restricted to application domain
  
Rate Limiting:
  Authentication: 5 attempts per minute
  API Calls: 100 requests per minute per user
```

### 5.3 Reliability Requirements

```yaml
Availability:
  Uptime Target: 99% (for MVP)
  Planned Maintenance: < 1 hour monthly
  
Data Durability:
  Database Backups: Daily automated
  Backup Retention: 30 days
  Recovery Time Objective: < 4 hours
  Recovery Point Objective: < 24 hours
  
Error Handling:
  Graceful Degradation: Cached data on API failure
  Error Logging: Structured logs with context
  User Feedback: Clear error messages
```

### 5.4 Scalability Considerations

```yaml
Current Limitations (MVP):
  Users: 100 concurrent
  Records per User: 10,000
  Database Size: 10GB
  
Future Scaling Path:
  Database: Read replicas for search
  Caching: Redis for session and search cache
  CDN: Static asset delivery
  Horizontal Scaling: Kubernetes deployment
```

## 6. Testing Requirements

### 6.1 Test Coverage Targets

```yaml
Unit Tests:
  Domain Layer: > 95%
  Use Cases: > 90%
  API Routes: > 85%
  
Integration Tests:
  Database Operations: > 90%
  Authentication Flow: > 95%
  API Endpoints: > 90%
  
E2E Tests:
  Critical User Journeys: 100%
  Authentication: 100%
  CRUD Operations: 100%
  Export/Import: 100%
```

### 6.2 Test Specifications

#### 6.2.1 Authentication Test Suite

**E2E Contract Test Specification:**

```typescript
describe('E2E: Authentication Flow', () => {
  it('should complete Google OAuth flow');
  it('should display user email after login');
  it('should persist session across page refreshes');
  it('should redirect to login on session expiry');
  it('should handle OAuth errors gracefully');
  it('should logout and clear session');
  it('should prevent access to protected routes when not authenticated');
  it('should redirect to originally requested page after login');
})
```

#### 6.2.2 Data Isolation Test Suite

**Integration Contract Test Specification:**

```typescript
describe('Data Isolation Contract', () => {
  it('should not allow access to other users records via API');
  it('should not include other users records in search results');
  it('should not show other users tags in statistics');
  it('should isolate import operations per user');
  it('should prevent cross-user record updates');
  it('should prevent cross-user record deletion');
  it('should separate export data per user');
})
```

#### 6.2.3 Migration Test Suite

**Integration Contract Test Specification:**

```typescript
describe('Data Migration Contract', () => {
  it('should successfully migrate v1.0 prototype data to MVP');
  it('should preserve all record content during migration');
  it('should maintain tag order from original records');
  it('should convert timestamps to new format');
  it('should handle large datasets (1000+ records)');
  it('should report accurate import statistics');
  it('should skip malformed records with error reporting');
  it('should prevent data loss during failed imports');
  it('should support partial import recovery');
})
```

#### 6.2.4 Performance Test Suite

**Performance Contract Test Specification:**

```typescript
describe('Performance Contract', () => {
  describe('Response Times', () => {
    it('should authenticate with Google in less than 2 seconds');
    it('should create record in less than 100ms');
    it('should search 10k records in less than 200ms');
    it('should calculate tag statistics in less than 500ms');
    it('should export 10k records in less than 5 seconds');
  });
  
  describe('Concurrent Load', () => {
    it('should handle 100 concurrent users');
    it('should process 50 requests per second');
    it('should maintain response times under load');
    it('should not leak memory under sustained load');
  });
})
```

#### 6.2.5 Security Test Suite

**Security Contract Test Specification:**

```typescript
describe('Security Contract', () => {
  describe('Authentication', () => {
    it('should reject requests without valid JWT');
    it('should prevent JWT token tampering');
    it('should enforce token expiration');
    it('should use secure httpOnly cookies');
  });
  
  describe('Input Validation', () => {
    it('should sanitize user input to prevent XSS');
    it('should use parameterized queries to prevent SQL injection');
    it('should validate request body schema');
    it('should enforce maximum payload sizes');
    it('should reject malformed JSON');
  });
  
  describe('Transport Security', () => {
    it('should enforce HTTPS for all endpoints');
    it('should set appropriate security headers');
    it('should implement CORS correctly');
    it('should prevent clickjacking with X-Frame-Options');
  });
})
```

## 7. Development Phases

### 7.1 Phase 1: Backend Foundation (Week 1-2)

```yaml
TDD Approach:
  - Write failing tests for domain entities FIRST
  - Define repository contracts through tests
  - Create migration tests before implementing migrations
  - All code written to satisfy existing tests

Tasks:
  - Setup backend project structure in monorepo
  - Configure TypeScript, ESLint, Prettier
  - Write tests for User domain entity
  - Implement User entity to pass tests
  - Write migration contract tests
  - Setup PostgreSQL with Docker Compose
  - Implement database migrations with TypeORM
  - Setup test infrastructure with coverage reporting

Deliverables:
  - Working Docker Compose setup
  - Database with tested migrations
  - Domain entities with 95%+ test coverage
  - CI pipeline enforcing test-first development

Test Coverage Target: 
  - Domain: >95%
  - Migrations: 100%
```

### 7.2 Phase 2: Authentication (Week 3)

```yaml
TDD Approach:
  - Write authentication contract tests first
  - Define JWT token validation tests
  - Create session management test suite
  - Implement only code to pass tests

Tasks:
  - Write authentication flow tests
  - Write JWT token management tests
  - Implement Google OAuth integration
  - Create JWT token management
  - Setup session handling
  - Write user repository tests
  - Implement user creation/retrieval
  - Add authentication middleware
  - Create login/logout endpoints

Deliverables:
  - Test suite for complete auth flow
  - Working Google OAuth (test-driven)
  - Protected API routes with tests
  - User session management

Test Coverage Target:
  - Auth flow: >95%
  - All tests written before implementation
```

### 7.3 Phase 3: Core API (Week 4-5)

```yaml
TDD Approach:
  - Write API contract tests for each endpoint
  - Create repository integration tests
  - Define validation test cases
  - Red-Green-Refactor for each feature

Tasks:
  - Write complete API contract test suite
  - Write repository integration tests
  - Implement record CRUD to pass tests
  - Create PostgreSQL repository (test-driven)
  - Add search functionality via tests
  - Write tag statistics tests
  - Implement tag statistics
  - Create data validation tests
  - Add error handling with tests

Deliverables:
  - Complete test suite before implementation
  - REST API developed via TDD
  - PostgreSQL integration (test-driven)
  - API documentation from tests

Test Coverage Target:
  - API routes: >85%
  - Repository: >90%
  - Tests must exist before code
```

### 7.4 Phase 4: Frontend Integration (Week 6-7)

```yaml
TDD Approach:
  - Write API client tests first
  - Create component tests before UI
  - Define state management tests
  - Mock-first development

Tasks:
  - Write API client test suite
  - Write authentication UI tests
  - Add API client implementation
  - Implement authentication UI
  - Write state management tests
  - Adapt state management for async
  - Create loading state tests
  - Add loading states
  - Write error boundary tests
  - Implement error handling

Deliverables:
  - Frontend test suite
  - Integrated frontend (test-driven)
  - Authentication flow with tests
  - Async state management

Test Coverage Target:
  - API client: >90%
  - Components: >80%
  - All features test-driven
```

### 7.5 Phase 5: Import/Export (Week 8)

```yaml
TDD Approach:
  - Define import/export contract tests
  - Write migration compatibility tests
  - Create validation test cases
  - Test error scenarios first

Tasks:
  - Write export endpoint tests
  - Write import functionality tests
  - Implement export endpoint via TDD
  - Create import functionality (test-driven)
  - Write version compatibility tests
  - Add version compatibility
  - Write duplicate detection tests
  - Handle duplicate detection
  - Create progress indicator tests
  - Add progress indicators

Deliverables:
  - Complete test coverage first
  - Working import/export (TDD)
  - Migration from v1.0 tested
  - Progress feedback tested

Test Coverage Target:
  - Migration: >95%
  - Every scenario test-driven
```

### 7.6 Phase 6: Deployment & Polish (Week 9-10)

```yaml
TDD Approach:
  - Write deployment smoke tests
  - Create security test suite
  - Define performance benchmarks
  - E2E tests for critical paths

Tasks:
  - Write E2E test suite
  - Write security validation tests
  - Setup Nginx configuration
  - Configure SSL with Let's Encrypt
  - Create deployment scripts
  - Add monitoring/logging
  - Write performance tests
  - Performance optimization
  - Security hardening via tests

Deliverables:
  - E2E test suite complete
  - Production-ready deployment
  - SSL configuration tested
  - Deployment documentation
  - All optimizations test-driven

Test Coverage Target:
  - E2E tests: 100% critical paths
  - Security tests: 100% requirements
```

## 8. Acceptance Criteria

### 8.1 Functional Criteria

```yaml
Authentication:
  ✓ Users can sign in with Google
  ✓ Sessions persist across browser refreshes
  ✓ Users can sign out
  ✓ Unauthorized access is prevented

Data Management:
  ✓ All CRUD operations work correctly
  ✓ Search returns accurate results
  ✓ Tag normalization works as specified
  ✓ Data isolation is enforced

Migration:
  ✓ V1.0 data imports successfully
  ✓ Export format is compatible
  ✓ No data loss during migration
  ✓ Duplicates are handled correctly

Performance:
  ✓ Search responds in <200ms
  ✓ Page load time <2s
  ✓ No memory leaks
  ✓ Handles 100 concurrent users
```

### 8.2 Technical Criteria

```yaml
Architecture:
  ✓ Clean Architecture maintained
  ✓ Domain logic unchanged
  ✓ Dependency injection used
  ✓ Repository pattern implemented

Testing:
  ✓ Test coverage meets targets
  ✓ All tests pass in CI
  ✓ E2E tests cover critical paths
  ✓ Contract tests validate APIs

Security:
  ✓ HTTPS enforced
  ✓ Authentication required
  ✓ Input validation complete
  ✓ SQL injection prevented

Deployment:
  ✓ Docker Compose works
  ✓ Single command deployment
  ✓ Rollback capability
  ✓ Backup/restore tested
```

## 9. Risks and Mitigations

### 9.1 Technical Risks

| Risk | Probability | Impact | Mitigation Strategy |
|------|-------------|--------|-------------------|
| Migration data loss | Low | High | Comprehensive testing, backup before migration, rollback plan |
| OAuth service outage | Low | High | Graceful error handling, status page, alternative auth in future |
| Database performance degradation | Medium | Medium | Indexing strategy, query optimization, monitoring |
| Token security breach | Low | Critical | Secure token storage, rotation